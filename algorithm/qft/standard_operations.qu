opaque measure(c:qubit): bool;
opaque Rx(q:qubit, v:double): unit;
opaque Ry(q:qubit, v:double): unit;
opaque Rz(q:qubit, v:double): unit;
opaque T(q:qubit): unit;
opaque Tdg(q:qubit): unit;
opaque S(q:qubit): unit;
opaque H(q:qubit): unit;
opaque CZ(c:qubit, t:qubit): unit;

operation X(q: qubit) : unit {
    Rx(q, 180.0);
}

operation Y(q: qubit) : unit {
    Ry(q, 180.0);
}

operation Z(q: qubit) : unit {
    Rz(q, 180.0);
}

operation CNOT(c: qubit, t: qubit): unit
{
	H(t);
	CZ(c, t);
	H(t);
}

operation swap(q0: qubit, q1: qubit) : unit {
    CNOT(q0, q1);
    CNOT(q1, q0);
    CNOT(q0, q1);
}

operation init(q: qubit) : unit {
    bool a = measure(q);
    if (a) {
        X(q);
    }
}

operation init_all(target: qubit[]) : unit {
	apply_all(init, target);
}

operation apply_all(gate: qubit -> unit, qubits: qubit[]) : unit {
	int i;
	i = 0;
	int num_qubits;
	num_qubits = qubits.length;
	while (i < num_qubits) {
		gate(qubits[i]);
		i = i + 1;
	}
}

operation meas_all(qubits: qubit[]) : bool[] {
	int num_qubits;
	num_qubits = qubits.length;

	bool[num_qubits] res;
	int i;
	i = 0;
	while (i < num_qubits) {
		res[i] = measure(qubits[i]);
		i = i + 1;
	}

	return res;
}
