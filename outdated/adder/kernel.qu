import config.json.*
import operations.*
import util.*

operation adder(): bool[] {
    bool[5] output;
    using((cin, a, b, cout) : (qubit, qubit[4], qubit[4], qubit)) {
        init(cin);
        init_all(a);
        init_all(b);
        init(cout);
        X(a[0]);
        X_all(b);
        majority(cin, b[0], a[0]);
        majority(a[0], b[1], a[1]);
        majority(a[1], b[2], a[2]);
        majority(a[2], b[3], a[3]);
        CNOT(a[3], cout);
        unmaj(a[2], b[3], a[3]);
        unmaj(a[1], b[2], a[2]);
        unmaj(a[0], b[1], a[1]);
        unmaj(cin, b[0], a[0]);
        output[0] = measure(b[0]);
        output[1] = measure(b[1]);
        output[2] = measure(b[2]);
        output[3] = measure(b[3]);
        output[4] = measure(cout);
    }
    return output;
}

operation majority(a:qubit, b:qubit, c:qubit) : unit {
    CNOT(c, b);
    CNOT(c, a);
    CCNOT(a, b, c);
}

operation unmaj(a:qubit, b:qubit, c:qubit) : unit {
    CCNOT(a, b, c);
    CNOT(c, a);
    CNOT(a, b);
}

operation X_all(target: qubit[]) : unit {
	int i;
	i = 0;
	int num_qubits;
	num_qubits = target.length;
	while (i < num_qubits) {
		X(target[i]);
		i = i + 1;
	}
}